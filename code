#include <graphics.h>
#include <conio.h>
#include <dos.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

int carX = 200, carY = 400;
int obstacleX = 200, obstacleY = 0;
int score = 0;
int speed = 5;
int carSpeed = 10; // سرعة أولية
int level = 1;
int obstacleType = 0; // 0: small, 1: large
int shake = 0; // لن نستخدمه

void drawRoad() {
    setcolor(WHITE);
    line(100, 0, 100, 480);
    line(300, 0, 300, 480);

    setfillstyle(SOLID_FILL, DARKGRAY);
    bar(101, 0, 299, 480);

    setcolor(YELLOW);
    for (int i = 0; i < 480; i += 40) {
        line(200, (i + (obstacleY % 40)) % 480, 200, (i + 20 + (obstacleY % 40)) % 480);
    }
}

void drawCar() {
    setcolor(DARKGRAY);
    setfillstyle(SOLID_FILL, DARKGRAY);
    fillellipse(carX + 10, carY + 45, 15, 5);

    setcolor(RED);
    setfillstyle(SOLID_FILL, RED);
    rectangle(carX, carY, carX + 20, carY + 40);
    floodfill(carX + 10, carY + 20, RED);

    setcolor(LIGHTBLUE);
    setfillstyle(SOLID_FILL, LIGHTBLUE);
    rectangle(carX + 4, carY + 5, carX + 16, carY + 15);
    floodfill(carX + 10, carY + 10, LIGHTBLUE);

    setcolor(LIGHTBLUE);
    setfillstyle(SOLID_FILL, LIGHTBLUE);
    rectangle(carX + 4, carY + 25, carX + 16, carY + 35);
    floodfill(carX + 10, carY + 30, LIGHTBLUE);

    setcolor(YELLOW);
    setfillstyle(SOLID_FILL, YELLOW);
    fillellipse(carX + 5, carY, 2, 2);
    fillellipse(carX + 15, carY, 2, 2);

    static int wheelPhase = 0;
    wheelPhase = (wheelPhase + carSpeed) % 360;
    setcolor(BLACK);
    setfillstyle(SOLID_FILL, BLACK);
    fillellipse(carX + 5, carY + 40, 3, 3);
    fillellipse(carX + 15, carY + 40, 3, 3);
    setcolor(WHITE);
    line(carX + 5, carY + 40, carX + 5 + 3 * cos(wheelPhase * 3.14159 / 180), carY + 40 + 3 * sin(wheelPhase * 3.14159 / 180));
    line(carX + 15, carY + 40, carX + 15 + 3 * cos(wheelPhase * 3.14159 / 180), carY + 40 + 3 * sin(wheelPhase * 3.14159 / 180));
}

void drawObstacleCar() {
    int width = obstacleType == 0 ? 20 : 30;
    int height = 40;

    setcolor(DARKGRAY);
    setfillstyle(SOLID_FILL, DARKGRAY);
    fillellipse(obstacleX + width / 2, obstacleY + height + 5, width / 2, 5);

    setcolor(obstacleType == 0 ? YELLOW : GREEN);
    setfillstyle(SOLID_FILL, obstacleType == 0 ? YELLOW : GREEN);
    rectangle(obstacleX, obstacleY, obstacleX + width, obstacleY + height);
    floodfill(obstacleX + width / 2, obstacleY + height / 2, obstacleType == 0 ? YELLOW : GREEN);

    setcolor(LIGHTBLUE);
    setfillstyle(SOLID_FILL, LIGHTBLUE);
    rectangle(obstacleX + 4, obstacleY + 5, obstacleX + width - 4, obstacleY + 15);
    floodfill(obstacleX + width / 2, obstacleY + 10, LIGHTBLUE);
    rectangle(obstacleX + 4, obstacleY + 25, obstacleX + width - 4, obstacleY + 35);
    floodfill(obstacleX + width / 2, obstacleY + 30, LIGHTBLUE);

    setcolor(RED);
    setfillstyle(SOLID_FILL, RED);
    fillellipse(obstacleX + 5, obstacleY, 2, 2);
    fillellipse(obstacleX + width - 5, obstacleY, 2, 2);

    setcolor(BLACK);
    setfillstyle(SOLID_FILL, BLACK);
    fillellipse(obstacleX + 5, obstacleY + height, 3, 3);
    fillellipse(obstacleX + width - 5, obstacleY + height, 3, 3);
}

void drawBackground() {
    setcolor(CYAN);
    setfillstyle(SOLID_FILL, CYAN);
    bar(0, 0, 640, 100);

    setcolor(YELLOW);
    setfillstyle(SOLID_FILL, YELLOW);
    fillellipse(550, 50, 20, 20);

    static int cloudX = 0;
    cloudX = (cloudX + 1) % 640;
    setcolor(WHITE);
    setfillstyle(SOLID_FILL, WHITE);
    fillellipse(cloudX, 50, 30, 15);
    fillellipse(cloudX + 40, 60, 30, 15);
    fillellipse(cloudX + 80, 40, 25, 10);

    static int birdX = 640;
    birdX = (birdX - 2) % 640;
    if (birdX < 0) birdX = 640;
    setcolor(BLACK);
    for (int i = 0; i < 3; i++) {
        int x = birdX + i * 50;
        int y = 20 + i * 10;
        line(x, y, x + 5, y - 5);
        line(x + 5, y - 5, x + 10, y);
    }

    for (int y = 150; y < 480; y += 100) {
        setcolor(GREEN);
        setfillstyle(SOLID_FILL, GREEN);
        ellipse(50, y, 0, 360, 20, 30);
        floodfill(50, y, GREEN);
setcolor(BROWN);
        setfillstyle(SOLID_FILL, BROWN);
        rectangle(45, y + 30, 55, y + 100);
        floodfill(50, y + 50, BROWN);
    }

    for (int y_right = 200; y_right < 480; y_right += 120) {
        setcolor(GREEN);
        setfillstyle(SOLID_FILL, GREEN);
        ellipse(350, y_right, 0, 360, 20, 30);
        floodfill(350, y_right, GREEN);
        setcolor(BROWN);
        setfillstyle(SOLID_FILL, BROWN);
        rectangle(345, y_right + 30, 355, y_right + 100);
        floodfill(350, y_right + 50, BROWN);
    }
}

int checkCollision() {
    int obsWidth = obstacleType == 0 ? 20 : 30;
    if (obstacleY + 40 >= carY && obstacleY <= carY + 40 &&
        obstacleX + obsWidth >= carX && obstacleX <= carX + 20) {
        return 1;
    }
    return 0;
}

void resetObstacle() {
    obstacleX = 110 + rand() % 160;
    obstacleY = 0;
    obstacleType = rand() % 2;
}

void showGameOver() {
    setcolor(RED);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
    outtextxy(120, 200, "GAME OVER!");
    
    char buf[50];
    sprintf(buf, "Score: %d  Level: %d", score, level);
    outtextxy(140, 250, buf);
}

void drawUI() {
    char buf[50];
    setcolor(WHITE);
    settextstyle(DEFAULT_FONT, HORIZ_DIR, 1);
    sprintf(buf, "Score: %d", score);
    outtextxy(10, 10, buf);
    sprintf(buf, "Speed: %d", carSpeed * 10);
    outtextxy(10, 30, buf);
    sprintf(buf, "Level: %d", level);
    outtextxy(10, 50, buf);
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TC\\BGI"); // استبدل المسار بمسار BGI الخاص بك
    srand(time(NULL));

    while (1) {
        cleardevice();
        
        setviewport(0, 0, 640, 480, 1);

        drawBackground();
        drawRoad();
        drawCar();
        drawObstacleCar();
        drawUI();

        obstacleY += speed;

        if (obstacleY > 480) {
            resetObstacle();
            score++;
            if (score % 10 == 0) {
                level++;
                speed += 3;
            }
        }

        if (kbhit()) {
            char ch = getch();
            if (ch == 75 && carX > 110) carX -= 20; // Left arrow
            if (ch == 77 && carX < 270) carX += 20; // Right arrow
            if (ch == 72 && carSpeed < 15) carSpeed++;
            if (ch == 80 && carSpeed > 1) carSpeed--;
        }

        if (checkCollision()) {
            sound(1000);
            delay(300);
            nosound();
            cleardevice();
            showGameOver();
            break;
        }

        if (score % 2 == 0) {
            sound(500);
            delay(50);
            nosound();
        }

        delay(150 - carSpeed * 10);
    }

    getch();
    closegraph();
    return 0;
}
